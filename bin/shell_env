
#================================
#  DOCKER
#================================


docker-ip(){
  boot2docker ip 2> /dev/null
}
# docker-enter script is in $HOME/bin

# for deleting old containers and images

checkitout (){
  check_boot2docker=$(boot2docker status | awk '{print $1}')
  if [ $check_boot2docker == 'running' ];then
    docker ps -a | grep 'Exit' | awk '{print $1}' | xargs docker rm &> /dev/null
    docker images | grep '<none>' | awk '{print $3}' | xargs docker rmi &> /dev/null
  else
    echo "boot2docker is down. boot it up!"
    boot2docker up
  fi
}
alias clear_docker=checkitout

use-boot2docker(){
  boot2docker start
  export DOCKER_HOST=tcp://192.168.59.104:2376
  export DOCKER_CERT_PATH=$HOME/.boot2docker/certs/boot2docker-vm
  export DOCKER_TLS_VERIFY=1
  BOOT2DOCKER_STATUS=$(boot2docker status)
  RPROMPT="%{$fg[magenta]%}[boot2docker:$BOOT2DOCKER_STATUS]%{$reset_color%}"
}

# export CURRENT_VM_IP=$(boot2docker ip 2> /dev/null)
# alias docker-identity=docker-1.4.1-dev-identity-auth
#================================
#  COREOS / FLEET
#================================

setup_fleet_ui(){
  do_droplets=($1 $2 $3)

  for droplet in ${do_droplets[@]}
  do
    ssh -A core@$droplet 'rm -rf ~/.ssh/id_rsa'
    scp /Users/jaigouk/.docker/certs/key.pem core@$droplet:.ssh/id_rsa
    ssh -A core@$droplet 'chown -R core:core /home/core/.ssh; chmod 700 /home/core/.ssh; chmod 600 /home/core/.ssh/authorized_keys'
  done
  FLEETCTL_TUNNEL=$droplet:22 fleetctl destroy fleet-ui@{1..3}.service
  FLEETCTL_TUNNEL=$droplet:22 fleetctl destroy fleet-ui@.service
  FLEETCTL_TUNNEL=$droplet:22 fleetctl submit  /Users/user_name/path_to_templates/fleet-ui@.service
  FLEETCTL_TUNNEL=$droplet:22 fleetctl start /Users/user_name/path_to_templates/fleet-ui@{1..3}.service
}

fleetctl-switch(){
  ssh-add ~/.docker/certs/key.pem
  DOCKER_HOST=tcp://$1:2376
  export FLEETCTL_TUNNEL=$1:22
  #alias etcdctl="ssh -A core@$1 'etcdctl'"
  alias fleetctl-ssh="fleetctl ssh $(fleetctl list-machines | cut -c1-8 | sed -n 2p)"
  RPROMPT="%{$fg[magenta]%}[fleetctl:$1]%{$reset_color%}"
}
start_mongo_replica(){
  CONTROL_IP=$1
  export FLEETCTL_TUNNEL=$CONTROL_IP:22
  ssh -A core@$CONTROL_IP 'etcdctl set /mongo/replica/name myreplica'
  FLEETCTL_TUNNEL=$1:22 fleetctl submit mongo-data@.service  mongo@.service mongo-replica-config.service
  FLEETCTL_TUNNEL=$1:22 fleetctl start mongo-data@{1..3}.service
  FLEETCTL_TUNNEL=$1:22 fleetctl start mongo@{1..3}.service
  FLEETCTL_TUNNEL=$1:22 fleetctl start mongo-replica-config.service
}
destroy_mongo_replica() {
  CONTROL_IP=$1
  export FLEETCTL_TUNNEL=$CONTROL_IP:22
  alias etcdctl="ssh -A core@$CONTROL_IP 'etcdctl'"
  FLEETCTL_TUNNEL=$1:22 fleetctl destroy mongo-data@{1..3}.service
  FLEETCTL_TUNNEL=$1:22 fleetctl destroy mongo@{1..3}.service
  FLEETCTL_TUNNEL=$1:22 fleetctl destroy mongo-data@.service
  FLEETCTL_TUNNEL=$1:22 fleetctl destroy mongo@.service
  FLEETCTL_TUNNEL=$1:22 fleetctl destroy mongo-replica-config.service
  ssh -A core@$CONTROL_IP 'etcdctl rm /mongo/replica/url'
  ssh -A core@$CONTROL_IP 'etcdctl rm /mongo/replica/siteRootAdmin --recursive'
  ssh -A core@$CONTROL_IP 'etcdctl rm /mongo/replica/siteUserAdmin --recursive'
  ssh -A core@$CONTROL_IP 'etcdctl rm /mongo/replica --recursive'
  ssh -A core@$CONTROL_IP 'etcdctl set /mongo/replica/name myreplica'
}
