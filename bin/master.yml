#cloud-config

---
write-files:
  - path: /etc/kubernetes/kube-config.yaml
    owner: root:root
    permissions: "0600"
    content: |
      KUBE_CONFIG_DATA
  - path: /etc/kubernetes/kube-proxy.yaml
    owner: root:root
    permissions: "0600"
    content: |
      PROXY_CONFIG_DATA
  - path: /etc/leader
    owner: root:root
    permissions: "0600"
    content: |
      LEADER_CONFIG_DATA

  - path: /home/core/.docker/config.json
    owner: core:core
    permissions: "0644"
    content: |
      DOCKER_CONFIG_DATA
  - path: /etc/ssh/ssh_host_ed25519_key
    owner: root:root
    permissions: "0644"
    content: |
      SSH_HOT_ED25519_DATA
  - path: /etc/ssh/ssh_host_rsa_key
    owner: root:root
    permissions: "0644"
    content: |
      SSH_HOST_RSA_DATA
  - path: /etc/conf.d/nfs
    permissions: "0644"
    content: |
      OPTS_RPC_MOUNTD=""
  - path: /opt/bin/wupiao
    permissions: "0755"
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?
  - path: /etc/coreos-checker
    permissions: "0755"
    content: |
      private_ipv4: $private_ipv4
  - path: /etc/ssh/sshd_config
    permissions: "0600"
    owner: root:root
    content: |
      Protocol 2
      Port 22
      UsePrivilegeSeparation sandbox
      Subsystem sftp internal-sftp
      PermitRootLogin no
      AllowUsers core
      HostKey /etc/ssh/ssh_host_ed25519_key
      HostKey /etc/ssh/ssh_host_rsa_key
      Host *
          KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
          PasswordAuthentication no
          ChallengeResponseAuthentication no
          PubkeyAuthentication yes
          HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,ssh-rsa
          Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
          MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com

hostname: master

coreos:
  etcd2:
    name: master
    discovery: "DISCOVERY_URL"
    listen-client-urls: "http://0.0.0.0:2379,http://0.0.0.0:4001"
    advertise-client-urls: "http://$private_ipv4:2379,http://$private_ipv4:4001"
    initial-cluster-token: "k8s_etcd"
    listen-peer-urls: "http://$private_ipv4:2380,http://$private_ipv4:7001"
    initial-advertise-peer-urls: "http://$private_ipv4:2380"
    initial-cluster: "master=http://$private_ipv4:2380"
    initial-cluster-state: "new"

  fleet:
    public-ip: "$public_ipv4"# used for fleetctl ssh command
    metadata: "role=master"
    etcd_servers: http://$public_ipv4:2379

  flannel:
    interface: $public_ipv4
    etcd_prefix: /coreos.com/network
    etcd_endpoints: http://$public_ipv4:2379

  update:
    group: "alpha"
    reboot-strategy: "off"

  units:
    - name: fleet.service
      command: start
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'

    - name: setup-network-environment.service
      command: start
      content: |
        # we can use default ipv4 env var
        #
        # LO_IPV4=127.0.0.1
        # ENO16777736_IPV4=192.168.12.10
        # DEFAULT_IPV4=192.168.12.10
        #
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/setup-network-environment -z /opt/bin/setup-network-environment https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot

    - name: docker.service
      drop-ins:
        - name: 10-tls-verify.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=-H=0.0.0.0:2376 --tlsverify --tlscacert=/etc/kubernetes/ssl/ca.pem --tlscert=/etc/kubernetes/ssl/server.pem --tlskey=/etc/docker/ssl/server-key.pem"
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
      command: restart
      content: |
        [Unit]
        Description=Docker Application Container Engine
        Documentation=http://docs.docker.io
        After=network.target
        [Service]
        ExecStartPre=/bin/mount --make-rprivate /
        # Run docker but don't have docker automatically restart
        # containers. This is a job for systemd and unit files.
        ExecStart=/usr/bin/docker -d -s=btrfs -r=false -H fd:// -D
        [Install]
        WantedBy=multi-user.target
    - name: docker-tcp.socket
      command: start
      enable: yes
      content: |
        [Unit]
        Description=Docker Socket for the API
        [Socket]
        ListenStream=2376
        BindIPv6Only=both
        Service=docker.service
        [Install]
        WantedBy=sockets.target
    - name: enable-docker-tcp.service
      command: start
      content: |
        [Unit]
        Description=Enable the Docker Socket for the API
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl enable docker-tcp.socket

    - name: download-kubernetes.service
      enable: true
      command: start
      content: |
        [Unit]
        After=network-online.target
        Description=Download Kubernetes Binaries
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=network-online.target
        [Service]
        Environment=KUBE_RELEASE_TARBALL=KUBE_RELEASE_TARBALL_URL
        ExecStartPre=/bin/mkdir -p /opt/bin/
        ExecStart=/bin/bash -c "curl -s -L $KUBE_RELEASE_TARBALL | tar xzv -C /tmp/"
        ExecStart=/bin/tar xzvf /tmp/kubernetes/server/kubernetes-server-linux-amd64.tar.gz -C /opt
        ExecStartPost=/bin/ln -s /opt/kubernetes/server/bin/kubectl /opt/bin/
        ExecStartPost=/bin/mv /tmp/kubernetes/examples/guestbook /home/core/guestbook-example
        ExecStartPost=/bin/rm -rf /tmp/kubernetes
        ExecStartPost=/usr/bin/chmod -R a+r /opt/kubernetes
        ExecStartPost=/usr/bin/chmod -R a+x /opt/kubernetes
        RemainAfterExit=yes
        Type=oneshot

    - name: kube-kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service
        After=setup-network-environment.service
        After=download-kubernetes.service
        [Service]
        EnvironmentFile=/etc/network-environment
        EnvironmentFile=/etc/leader
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        # wait for kubernetes master to be up and ready
        ExecStart=/opt/bin/kubelet \
        --address=0.0.0.0 \
        --port=10250 \
        --hostname-override=${DEFAULT_IPV4} \
        --api_servers=http://${LEADER_ENDPOINT}:8080 \
        --register-node=false \
        --allow-privileged=true \
        --cadvisor_port=4194 \
        --allow_privileged=true \
        --logtostderr=true \
        --healthz_bind_address=0.0.0.0 \
        --healthz_port=10248
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target

    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service
        After=setup-network-environment.service
        After=download-kubernetes.service
        [Service]
        EnvironmentFile=/etc/leader
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
        # wait for kubernetes master to be up and ready
        ExecStartPre=/opt/bin/wupiao $private_ipv4 8080
        ExecStart=/opt/bin/kube-proxy \
        --master=${LEADER_ENDPOINT}:8080 \
        --logtostderr=true
        --kubeconfig="/etc/leader"
        Restart=always
        RestartSec=10
