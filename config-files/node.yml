#cloud-config

---
write-files:
  - path: /home/core/.docker/config.json
    owner: core:core
    permissions: "0644"
    content: |
      DOCKER_CONFIG_DATA
  - path: /home/core/.dockercfg
    owner: core:core
    permissions: "0644"
    content: |
      DOCKER_CONFIG_DATA
  - path: /opt/bin/wupiao
    permissions: "0755"
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && [ -n "$2" ] && while ! curl --output /dev/null \
        --silent --head --fail \
        http://${1}:${2}; do sleep 1 && echo -n .; done;
      exit $?
  - path: /etc/coreos-checker
    permissions: "0755"
    content: |
      private_ipv4: $private_ipv4
  - path: /etc/ssh/sshd_config
    permissions: 0600
    owner: root:root
    content: |
      Protocol 2
      Port 22
      UsePrivilegeSeparation sandbox
      Subsystem sftp internal-sftp
      PermitRootLogin no
      AllowUsers core
      HostKey /etc/ssh/ssh_host_ed25519_key
      HostKey /etc/ssh/ssh_host_rsa_key
      Host *
          KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
          PasswordAuthentication no
          ChallengeResponseAuthentication no
          PubkeyAuthentication yes
          HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,ssh-rsa
          Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
          MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com

coreos:
  etcd2:
    discovery: "DISCOVERY_URL"
    listen-client-urls: "http://0.0.0.0:2379,http://0.0.0.0:4001"
    advertise-client-urls: "http://0.0.0.0:2379,http://0.0.0.0:4001"
    initial-cluster: "master=http://MASTER_PRIVATE_IP:2380"
    proxy: on

  fleet:
    public-ip: "$public_ipv4"# used for fleetctl ssh command
    metadata: "role=node"

  update:
    group: "alpha"
    reboot-strategy: "off"

  units:
    - name: fleet.service
      command: start
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'

    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/setup-network-environment -z /opt/bin/setup-network-environment https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot

    - name: docker.service
      drop-ins:
        - name: 10-tls-verify.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=-H=0.0.0.0:2376 --tlsverify --tlscacert=/etc/docker/ca.pem --tlscert=/etc/kubernetes/ssl/server.pem --tlskey=/etc/kubernetes/ssl/server-key.pem"
      command: restart
      content: |
        [Unit]
        Description=Docker Application Container Engine
        Documentation=http://docs.docker.io
        After=network.target
        [Service]
        ExecStartPre=/bin/mount --make-rprivate /
        # Run docker but don't have docker automatically restart
        # containers. This is a job for systemd and unit files.
        ExecStart=/usr/bin/docker -d -s=btrfs -r=false -H fd:// -D
        [Install]
        WantedBy=multi-user.target
    - name: docker-tcp.socket
      command: start
      enable: yes
      content: |
        [Unit]
        Description=Docker Socket for the API
        [Socket]
        ListenStream=2376
        BindIPv6Only=both
        Service=docker.service
        [Install]
        WantedBy=sockets.target
    - name: enable-docker-tcp.service
      command: start
      content: |
        [Unit]
        Description=Enable the Docker Socket for the API
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl enable docker-tcp.socket

    - name: download-kubernetes.service
      enable: true
      command: start
      content: |
        [Unit]
        After=network-online.target
        Description=Download Kubernetes Binaries
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=network-online.target
        [Service]
        Environment=KUBE_RELEASE_TARBALL=KUBE_RELEASE_TARBALL_URL
        ExecStartPre=/bin/mkdir -p /opt/bin/
        ExecStart=/bin/bash -c "curl -s -L $KUBE_RELEASE_TARBALL | tar xzv -C /tmp/"
        ExecStart=/bin/tar xzvf /tmp/kubernetes/server/kubernetes-server-linux-amd64.tar.gz -C /opt
        ExecStartPost=/bin/ln -s /opt/kubernetes/server/bin/kubectl /opt/bin/
        ExecStartPost=/bin/mv /tmp/kubernetes/examples/guestbook /home/core/guestbook-example
        ExecStartPost=/bin/rm -rf /tmp/kubernetes
        ExecStartPost=/usr/bin/chmod -R a+r /opt/kubernetes
        ExecStartPost=/usr/bin/chmod -R a+x /opt/kubernetes
        RemainAfterExit=yes
        Type=oneshot
